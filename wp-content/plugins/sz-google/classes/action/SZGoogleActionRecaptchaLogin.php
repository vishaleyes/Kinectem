<?php

/**
 * Define a class that identifies an action called by the
 * main module based on the options that have been activated
 *
 * @package SZGoogle
 * @subpackage Actions
 * @author Massimo Della Rovere
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */

if (!defined('SZ_PLUGIN_GOOGLE') or !SZ_PLUGIN_GOOGLE) die();

// Before the definition of the class, check if there is a definition 
// with the same name or the same as previously defined in other script.

if (!class_exists('SZGoogleActionRecaptchaLogin'))
{
	class SZGoogleActionRecaptchaLogin extends SZGoogleAction
	{
		/**
		 * Add in the builder phase filters and 
		 * actions necessary to control login coded time
		 */

		function __construct()
		{
			add_action('login_form'  ,array($this,'addCaptchaLoginForm'));
			add_action('login_head'  ,array($this,'addCaptchaLoginCSS'));
			add_filter('authenticate',array($this,'addCaptchaLoginCheck'),30,3);
		}

		/**
		 * Add the input field that concerns the security code
		 * is generated by the application of google recaptcha
		 */

		function addCaptchaLoginForm() 
		{
			$options = (object) $this->getModuleOptions('SZGoogleModuleRecaptcha');

			echo '<p><label for="recaptcha">'.SZGoogleCommon::getTranslate('reCAPTCHA','sz-google').'<br/>';
			echo '<script src="https://www.google.com/recaptcha/api.js"></script>';
			echo '<div class="g-recaptcha" data-theme="'.$options->recaptcha_style_login.'" data-sitekey="'.$options->recaptcha_key_site.'"></div>';
			echo '<br/>';
		}

		/**
		 * Function to add a css value and adjust 
		 * the size of wordpress login too small
		 */

		function addCaptchaLoginCSS() 
		{
			$options = (object) $this->getModuleOptions('SZGoogleModuleRecaptcha');

			if (!is_numeric($options->recaptcha_style_login_width))
				$options->recaptcha_style_login_width = '350';

			if ($options->recaptcha_style_login_CSS == '1') {
				echo '<style type="text/css">'."\n";
				echo '#login { width:'.$options->recaptcha_style_login_width.'px; }';
				echo '</style>'."\n";
			}
		}

		/**
		 * Function to check if the control captcha was passed in a positive way
		 * I run an http request to google to get the result (JSON format)
		 */

		function addCaptchaLoginCheck($user,$username,$password)
		{
			// If not defined user and password not
			// proceed with any control regarding captcha

			if (empty($username) or empty($password)) return $user;

			// Function to check if the control captcha was passed in a positive way
			// I run an http request to google to get the result (JSON format)

			if (!$this->checkCaptca()) {
				$user = new WP_Error('denied','<strong>ERROR</strong>: '.ucfirst(__('check reCAPTCHA failed.','sz-google')));
				remove_action('authenticate','wp_authenticate_username_password',20);
			}
 
			return $user;
		}

		/**
		 * Function to check if the control captcha was passed in a positive way
		 * I run an http request to google to get the result (JSON format)
		 */

		function checkCaptca()
		{
			$options = (object) $this->getModuleOptions('SZGoogleModuleRecaptcha');

			$remoteip = $_SERVER["REMOTE_ADDR"];
			$response = $_POST["g-recaptcha-response"];

			// Preparation string of recall URL reCAPTCHA with
			// the parameter values calculated + the secret key

			$url  = "https://www.google.com/recaptcha/api/siteverify";
			$url .= "?secret="  .urlencode(stripslashes($options->recaptcha_key_secret));
			$url .= "&response=".urlencode(stripslashes($response));
			$url .= "&remoteip=".urlencode(stripslashes($remoteip));

			// Execution called HTTP GET and retrieval of
			// files JSON return with conversion object 

			$response = file_get_contents($url);
			$response = json_decode($response,true);

			if (isset($response['success']) and $response['success']) return true;
				else return false;
		}
	}
}